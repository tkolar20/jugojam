version: '3.7'
volumes:
  redpanda0: null
networks:
  redpanda-net:
    driver: bridge
services:
  backend:
    container_name: backend
    image: dockerfile
    restart: always
    build: .
    volumes:
      - ./logs:/data/logs
    ports:
    - "4000:4000"
    networks:
      - redpanda-net
    depends_on:
      - redpanda0

  redpanda0:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.1
    container_name: redpanda0
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda0:33145
      - --advertise-rpc-addr redpanda0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      - --overprovisioned
      - --set
      - redpanda.cluster_id=turning-red
      - --set 
      - redpanda.enable_idempotence=true
      - --set 
      - redpanda.enable_transactions=true
      - --set
      - redpanda.auto_create_topics_enabled=true
      - --node-id
      - '0'
    volumes:
      - redpanda0:/var/lib/redpanda/data
    networks:
      - redpanda-net
    ports:
      - "19092:19092" 
      - "127.0.0.1:19644:9644" #admin-api
      - 18081:18081
      - 18082:18082
    healthcheck:
      test: rpk cluster health
  
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    networks:
     - redpanda-net
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda0:9644"]
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      redpanda0:
        condition: service_healthy

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    hostname: ksqldb-server
    container_name: ksqldb-server
    networks:
     - redpanda-net
    depends_on:
      - redpanda0
    ports:
      - "127.0.0.1:8088:8088"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "redpanda0:9092"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
  
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    networks:
     - redpanda-net
    depends_on:
      - redpanda0
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true